#Kabanero! on activate substitute Digest for text '@Digest@'
apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: fetch-and-fill-manifest-@Digest@
spec:
  workspaces:
    - name: source
      mountPath: /source
  params:
    - name: devfilePath
      default: repo/devfile.yaml
    - name: manifestSubPath
      default: manifest.yaml
    - name: newImage
      type: string
    - name: component
      type: string
  steps:
    - name: fetch-manifest
      image: icp4apps/pipelines-utils:latest
      script: |
        MANIFEST_PATH="$(workspaces.source.path)/$(params.manifestSubPath)"
        DEVFILE="$(workspaces.source.path)/devfile.yaml"
        LOCAL_DEVFILE="$(workspaces.source.path)/$(params.devfilePath)"

        yq -r . ${DEVFILE}

        # Fetch deployment manifest from stack devfile
        LOOKUP='.metadata."alpha.deployment-manifest"'
        MANIFEST_URL=$(yq -r $LOOKUP $DEVFILE)
        wget -O $MANIFEST_PATH $MANIFEST_URL
        echo "deployment manifest before:"
        cat ${MANIFEST_PATH}

        # generate values.yaml for go template substitution
        PARAMS_FILE="values.yaml"
        echo "CONTAINER_IMAGE: \"$(params.newImage)\"" > ${PARAMS_FILE}
        yq -r . ${LOCAL_DEVFILE}
        # COMPONENT_NAME=$(yq -r '.components[0].container.name' $LOCAL_DEVFILE)
        COMPONENT_NAME=$(params.component)
        echo "COMPONENT_NAME: \"${COMPONENT_NAME}\"" >> ${PARAMS_FILE}
        LOOKUP='.components[0].container.endpoints[0].targetPort'
        PORT=$(yq -r $LOOKUP $LOCAL_DEVFILE)
        echo "PORT: ${PORT}" >> ${PARAMS_FILE}
        echo "Params file ${PARAMS_FILE}:"
        cat ${PARAMS_FILE}

        # Perform go template substituion
        OUTPUT_FILE="output.yaml"
        cat << EOF | python3
        import go_template
        go_template.render_template("$MANIFEST_PATH","$PARAMS_FILE","$OUTPUT_FILE")
        EOF

        # Copy result back
        cp ${OUTPUT_FILE} ${MANIFEST_PATH}
        echo "deployment manifest after:"
        cat ${MANIFEST_PATH}
