#Kabanero! on activate substitute Digest for text '@Digest@'
# Monitor the pipelinerun status and update the pull request
apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: monitor-task-@Digest@
  namespace: tekton-pipelines
spec:
  resources:
    inputs:
      - name: pull-request
        type: pullRequest
    outputs:
      - name: pull-request
        type: pullRequest
  params:
    - name: statusesurl
      description: The statuses url
      type: string
    - name: commentsuccess
      description: The text to use in the situation where a PipelineRun has succeeded.
      default: "Success"
      type: string
    - name: commentfailure
      description: The text to use in the situation where a PipelineRun has failed.
      default: "Failed"
      type: string
    - name: commenttimeout
      description: The text to use in the situation where a PipelineRun has timed out.
      default: "Unknown"
      type: string
    - name: commentmissing
      description: The text to use in the situation where a PipelineRun cannot be found.
      default: "Missing"
      type: string
    - name: dashboard-url
      description: The URL to the PipelineRuns page of the dashboard
#     default: "http://localhost:9097/"
      default: "https://console-openshift-console.apps.[dns.domain]/k8s/ns/[namespace]/tekton.dev~v1alpha1~PipelineRun/[pipeline-run-name]."
      type: string
    - name: provider
      description: The Git provider ("github" or "gitlab")
      default: "github"
      type: string
    - name: apiurl
      description: The Git API URL for the repository
      type: string
    - name: insecure-skip-tls-verify
      description: Whether or not to verify SSL Certificates from the git server ("true" or "false")
      default: "false"
      type: string
    # This can be deleted after pending status change issue is resolved, that being that AFAIK the pull request resource only modifies
    # status once everything is complete, so we can only modify status via the pull request resource once.  To get around this we hit
    # the git status URL to set the status into pending and use this secret to during that request.
    - name: secret
      description: The secret containing the access token to access the git server
      type: string
    - name: secretkey
      description: The key to the secret containing the access token to access the git server
      type: string
    # Up to here
  steps:
  - name: check
    image: mchengdocker/pipelines-utils:latest
    env:
      - name: EVENTID
        valueFrom:
          fieldRef:
            fieldPath: metadata.labels['triggers.tekton.dev/triggers-eventid']
      - name: COMMENT_SUCCESS
        value: $(inputs.params.commentsuccess)
      - name: COMMENT_FAILURE
        value: $(inputs.params.commentfailure)
      - name: COMMENT_TIMEOUT
        value: $(inputs.params.commenttimeout)
      - name: COMMENT_MISSING
        value: $(inputs.params.commentmissing)
      - name: URL
        value: $(inputs.params.dashboard-url)
      - name: STATUSES_URL
        value: $(inputs.params.statusesurl)
      - name: GITPROVIDER
        value: $(inputs.params.provider)
      - name: GITAPIURL
        value: $(inputs.params.apiurl)
      - name: SKIPSSLVERIFY
        value: $(inputs.params.insecure-skip-tls-verify)
      # This can be deleted after any fix to the above mentioned pending status change
      - name: GITTOKEN
        valueFrom:
          secretKeyRef:
            key: $(inputs.params.secretkey)
            name: $(inputs.params.secret)
      # Up to here
    command: ["/bin/bash"]
    args:
    - -ce
    - |
      set -e
      cat <<EOF | python2
      #CODE_TO_UNIT_TEST_STARTS_HERE
      import time, os, json, requests, pprint, shutil, distutils.util
      from kubernetes import client, config
      #########################
      # Status
      #########################
      STATUS_PENDING = 0
      STATUS_SUCCEEDED = 1
      STATUS_FAILED = 2
      STATUS_TIMEDOUT = 3
      STATUS_MISSING = 4  # pipeline resource was discovered, then became missing
      #########################
      RESOURCE = "resource"
      STATUS = "status"
      METADATA = "metadata"
      NAMESPACE = "namespace"
      NAME = "name"
      CONDITIONS = "conditions"
      TYPE = "type"
      #########################
      # Return the key for a Kubernetes resource
      ########################
      def getKey(resource):
        name = resource[METADATA][NAME]
        namespace = resource[METADATA][NAMESPACE]
        return namespace + "/" + name
      #########################
      # Given a pipelinerun resource, return its status, one of STATUS_PENDING, STATUS_SUCCEEDED, or STATUS_FAILED
      # Note that STATUS_TIMEOUT and STATUS_MISSING are not determinable here
      #########################
      def getStatus(entry):
        if entry[STATUS][CONDITIONS][0][STATUS] == u'True' and entry[STATUS][CONDITIONS][0][TYPE] == u'Succeeded':
          return STATUS_SUCCEEDED
        if entry[STATUS][CONDITIONS][0][STATUS] == u'False' and entry[STATUS][CONDITIONS][0][TYPE] == u'Succeeded':
          return STATUS_FAILED
        return STATUS_PENDING
      #########################
      # Given a list of Kubernetes resources, return a map where key is "namespace/name" and the
      # value is: {"resource": resource, "status": stat}, where 
      #  resource is the value of the Kubernetes resource
      #  status is one of STATUS_PENDING, SUTATUS_SUCCEEDED, STATUS_FAILED
      #########################
      def createResourceMap(resourceList):
        ret = {}
        for resource in resourceList:
          key = getKey(resource)
          ret[key] = {}
          ret[key][RESOURCE] = resource
          ret[key][STATUS] = getStatus(resource)
        return ret
      #########################
      # Update existing map of pipelineruns with new data
      #   newRuns: new map of pipeline runs 
      #   existingRuns: existing map of pipelineruns
      # Return number of pending runs
      #########################
      def updateResourceMap(newRuns, existingRuns):
        numPending = 0
        # Whatever is new newRuns replaces what's in existingRuns
        for key in newRuns:
          existingRuns[key] = newRuns[key]
          if existingRuns[key][STATUS] == STATUS_PENDING:
            numPending = numPending+1
        # For anything in existingRuns not in newRuns, mark it as STATUS_MISSING
        # This can happen if a pipelinerun is deleted while it's running
        for key in existingRuns:
          if not newRuns.has_key(key):
            existingRuns[key][STATUS] = STATUS_MISSING
        return numPending
      ######################################
      # Prost proessing
      ######################################
      def postProcess(pipelineRunURLPrefix, existingStatus):
        failed = 0
        missing = 0
        timedout = 0
        results = []
        for key in existingStatus:
          entry = existingStatus[key][RESOURCE]
          pr = entry["metadata"]["name"]
          namespace = entry["metadata"]["namespace"]
          pipeline = entry["spec"]["pipelineRef"]["name"]
          link = pipelineRunURLPrefix + "/k8s/ns/kabanero/tekton.dev~v1alpha1~PipelineRun/" + pr
          if existingStatus[key][STATUS] == STATUS_MISSING:
            # To test this we need a webhook that will kick off two Pipelines
            # We will then delete one PipelineRun and observe it is correctly picked up as missing
            # This is easiest done by reopening an existing PullRequest
            # It's important to delete the PipelineRun only after the monitor task is already running because
            # the first thing it's going to do is figure out the PipelineRuns to watch over
            missing = missing+1
            link = pipelineRunURLPrefix + "/k8s/ns/kabanero/tekton.dev~v1alpha1~PipelineRun"
            results.append("[**$COMMENT_MISSING**](" + link + ") | " + pipeline + " | " + pr + " | " + namespace)
          elif existingStatus[key][STATUS] == STATUS_SUCCEEDED:
            results.append("[**$COMMENT_SUCCESS**](" + link + ") | " + pipeline + " | " +  pr + " | " + namespace)
          elif existingStatus[key][STATUS] == STATUS_FAILED:
            failed = failed+1
            results.append("[**$COMMENT_FAILURE**](" + link + ") | " + pipeline + " | " + pr + " | " + namespace)
          elif existingStatus[key][STATUS] == STATUS_PENDING:
            timedout = timedout +1
            results.append("[**$COMMENT_TIMEOUT**](" + link + ") | " + pipeline + " | " + pr + " | " + namespace)
          else:
            print("error: pipeilne " + pr+  " has unknown status: " + existingStatus[key][STATUS])
        return results, failed, missing, timedout
      ############################
      #CODE_TO_UNIT_TEST_ENDS_HERE
      ############################
      # Main subroutine
      #########################
      def processMonitorTask():
        config.load_incluster_config()
        api_instance = client.CustomObjectsApi(client.ApiClient(client.Configuration()))
        gitPRcontext = "Tekton"
        gitPRurl = ""
        if not "$URL".startswith("http"):
          pipelineRunURLPrefix = "http://" + "$URL"
        else:
          pipelineRunURLPrefix = "$URL"
        verifySSL = not bool(distutils.util.strtobool("$SKIPSSLVERIFY"))
        if "$GITPROVIDER" == "github":
          statusurl = "$STATUSES_URL"
          pendingData = {
            "state": "pending",
            "description": "pipelines in progress",
            "target_url": pipelineRunURLPrefix + "/k8s/ns/kabanero/tekton.dev~v1alpha1~PipelineRun",
            "context": "Tekton"
          }
          resp = requests.post(statusurl, json.dumps(pendingData), headers = {'Content-Type': 'application/json', 'Authorization': "Token $GITTOKEN"}, verify=verifySSL)
          print(resp)
        if "$GITPROVIDER" == "gitlab":
          statusurl = "$GITAPIURL" + "/" + "$STATUSES_URL" + "?state=pending&name=Tekton&target_url=" + pipelineRunURLPrefix + "/k8s/ns/kabanero/tekton.dev~v1alpha1~PipelineRun"
          resp = requests.post(statusurl, headers = {'Authorization': "Bearer $GITTOKEN"}, verify=verifySSL)
          print(resp)
        labelToCheck = "triggers.tekton.dev/triggers-eventid=$EVENTID"
        failed = 0
        i = range(180)
        existingStatus = {}
        for x in i:
          time.sleep( 10 )
          print(" BEGIN loop: " , x)
          newResources = api_instance.list_cluster_custom_object("tekton.dev", "v1beta1", "pipelineruns", label_selector=labelToCheck)["items"]
          newResourceStatus = createResourceMap(newResources)
          numPending = updateResourceMap(newResourceStatus, existingStatus)
          if len(existingStatus) > 0 and numPending == 0 :
            break
        # loop endeded, post processing
        results, failed, missing, timedout = postProcess(pipelineRunURLPrefix, existingStatus)
        gitPRdescription = "All pipelines succeeded!"
        gitPRcode = "success"
        if failed > 0:
          gitPRdescription = str(failed) + " pipeline(s) failed!"
          gitPRcode = "failure"
        if missing > 0:
          gitPRdescription = "Pipeline(s) missing!"
          gitPRcode = "failure"
        if timedout > 0:
          print("Some PipelineRuns had not completed when the monitor reached its timeout")
          gitPRdescription = "timed out monitoring PipelineRuns"
          gitPRcode = "error"
      
        if (results == []):
          gitPRdescription = "No PipelineRuns were ever found for my PullRequest!"
          gitPRcode = "error"
          data = "**$COMMENT_MISSING** | N/A | No PipelineRuns were ever detected, failing the build | N/A"
          results.append(data)
      
        comment = ("## Tekton Status Report \n\n"
                   "Status | Pipeline | PipelineRun | Namespace\n"
                   ":----- | :------- | :--------------- | :--------\n"
                   ) + "\n".join(results)
      
        shutil.copyfile("/workspace/pull-request/pr.json","/workspace/output/pull-request/pr.json")
        # Preserve existing comments
        shutil.copytree("/workspace/pull-request/comments","/workspace/output/pull-request/comments")
        handle = open("/workspace/output/pull-request/comments/newcomment.json", 'w')
        handle.write(comment)
        handle.close()
        if not "$URL".startswith("http"):
          detailsURL = "http://" + "$URL" + "/#/pipelineruns"
        else:
          detailsURL = "$URL" + "/#/pipelineruns"
        print("Set details url to " + detailsURL)
        status = json.dumps(dict(Label=gitPRcontext,state=gitPRcode,Desc=gitPRdescription,Target=detailsURL))
        print("Setting status to " + status)
        if not os.path.exists("/workspace/output/pull-request/status"):
          os.makedirs("/workspace/output/pull-request/status")
        handle = open("/workspace/output/pull-request/status/Tekton.json", 'w')
        handle.write(status)
        handle.close()
        if not os.path.exists("/workspace/output/pull-request/labels"):
          shutil.copytree("/workspace/pull-request/labels","/workspace/output/pull-request/labels")
        shutil.copyfile("/workspace/pull-request/base.json","/workspace/output/pull-request/base.json")
        shutil.copyfile("/workspace/pull-request/head.json","/workspace/output/pull-request/head.json")
      ############################################
      # end main subroutine
      ############################################
      processMonitorTask()
      EOF
