# (C) Copyright IBM Corporation 2019, 2021
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#Kabanero! on activate substitute Digest for text '@Digest@'
# This task will retag an image in the image registry and push it back to image registry with the new tag.
apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: image-retag-task-@Digest@
spec:
  resources:
    inputs:
      - name: docker-src-image
        type: image
    outputs:
      - name: docker-dest-image
        type: image
  steps:
    - name: buildah-pull
      # Pull down the source image from the registry.
      securityContext:
        privileged: true
      image: icp4apps/pipelines-utils:latest
      command: ["/bin/bash"]
      args:
        - -c
        - |
          # Configure image registry access in the container by adding it to the insecure registry list or enabling TLS verification
          # by adding it to the trust store based on OpenShift cluster resource configuration.
          echo "[INFO] Running the script /scripts/image_registry_access_setup.sh ...."
          /scripts/image_registry_access_setup.sh
          retVal=$?
          if [ $retVal -ne 0 ]
          then
            echo "[ERROR] The script failed(/scripts/image_registry_access_setup.sh)" >&2
            exit $retVal
          fi
          echo "[INFO] Completed setup for image registry access."
            
          buildah pull $(inputs.resources.docker-src-image.url)
      volumeMounts:
        - mountPath: /var/lib/containers
          name: varlibcontainers
    - name: buildah-tag
      # Tag the pulled image with the new tag. 
      securityContext:
        privileged: true
      image: icp4apps/pipelines-utils:latest
      command: ["/bin/bash"]
      args:
        - -c
        - |
          # Configure image registry access in the container by adding it to the insecure registry list or enabling TLS verification
          # by adding it to the trust store based on OpenShift cluster resource configuration.
          echo "[INFO] Running the script /scripts/image_registry_access_setup.sh ...."
          /scripts/image_registry_access_setup.sh
          retVal=$?
          if [ $retVal -ne 0 ]
          then
            echo "[ERROR] The script failed(/scripts/image_registry_access_setup.sh)" >&2
            exit $retVal
          fi
          echo "[INFO] Completed setup for image registry access."
            
          buildah tag $(inputs.resources.docker-src-image.url) $(outputs.resources.docker-dest-image.url)
      volumeMounts:
        - mountPath: /var/lib/containers
          name: varlibcontainers
    - name: buildah-push
      # Push the newly tagged image to the registry.
      securityContext:
        privileged: true
      image: icp4apps/pipelines-utils:latest
      command: ["/bin/bash"]
      args:
        - -c
        - |
          # Configure image registry access in the container by adding it to the insecure registry list or enabling TLS verification
          # by adding it to the trust store based on OpenShift cluster resource configuration.
          echo "[INFO] Running the script /scripts/image_registry_access_setup.sh ...."
          /scripts/image_registry_access_setup.sh
          retVal=$?
          if [ $retVal -ne 0 ]
          then
            echo "[ERROR] The script failed(/scripts/image_registry_access_setup.sh)" >&2
            exit $retVal
          fi
          echo "[INFO] Completed setup for image registry access."
            
          buildah push $(outputs.resources.docker-dest-image.url) docker://$(outputs.resources.docker-dest-image.url)
      volumeMounts:
        - mountPath: /var/lib/containers
          name: varlibcontainers
  volumes:
    - name: varlibcontainers
      emptyDir: {}
