apiVersion: tekton.dev/v1alpha1
kind: Task
metadata:
  name: pipelines-build-task
spec:
  inputs:
    resources:
      - name: git-source
        type: git
    params:        
      - name: registry
        type: string
        description: Container registry where images will be pushed by the task.
        default: "image-registry.openshift-image-registry.svc:5000" 
      - name: registryNamespace
        type: string
        description: This is the container registry namespace, in case of docker.io as registry this will be dockerhub-id
      - name: hostname
        type: string
        description: Hostname of the application hosting pipeline assets
        default: "pipelines-index"
      - name: clusterSubdomain
        type: string
        default: ""
        description: Cluster subdomain
      - name: indexImage
        type: string
        description: Name of the pipelines index image
        default: "pipelines-index"
      - name: deploymentSuffix
        type: string
        description: Deployment name suffix. Specify 'git' to use Git revision as the suffix.
        default: "latest"
      - name: utilsImageName
        type: string
        description: Name of the piplines utils image
        default: "pipelines-utils"
      - name: utilsImageTag
        type: string
        description: Tag name of the piplines utils image
        default: "latest"
      - name: indexImageRegistryPublish
        type: string
        description: pipeline-index image publish option
        default: "true"
      - name: utilsImageRegistryPublish
        type: string
        description: pipelines-utils image publish option
        default: "true"
      - name: imageRegistryUsername
        type: string
        description: Username of the container registry
        default: ""
      - name: imageRegistryPassword
        type: string
        description: Password of the container registry
        default: ""
      - name: useBuildah
        type: string
        description: Container build option for building the container image
        default: "true"
      - name: buildahFormat
        type: string
        description: Buildah format used in building buildah container image
        default: "docker"
  steps:
    - name: build-pipelines
      securityContext:
        privileged: true
      image: icp4apps/pipelines-utils:latest
      command: ["/bin/bash"]
      args:
        - -cex
        - |
          # install dependencies
          yum install -y findutils
    
          # do build and release
          export USE_BUILDAH="$(inputs.params.useBuildah)"
          export BUILDAH_FORMAT="$(inputs.params.buildahFormat)"
          export IMAGE_REGISTRY="$(inputs.params.registry)"
          export IMAGE_REGISTRY_ORG="$(inputs.params.registryNamespace)"
          export INDEX_IMAGE="$(inputs.params.indexImage)"
          export INDEX_VERSION=$(echo '$(inputs.resources.git-source.revision)' | tr '[:upper:]' '[:lower:]' | tr -cd '[:alnum:].-')
          export IMAGE_REGISTRY_PUBLISH="$(inputs.params.indexImageRegistryPublish)"
          export UTILS_IMAGE_REGISTRY_PUBLISH="$(inputs.params.utilsImageRegistryPublish)"

          export IMAGE_REGISTRY_USERNAME="$(inputs.params.imageRegistryUsername)"
          export IMAGE_REGISTRY_PASSWORD="$(inputs.params.imageRegistryPassword)"

          export UTILS_IMAGE_NAME="$(inputs.params.utilsImageName)"
          export UTILS_IMAGE_TAG="$(inputs.params.utilsImageTag)"
          cd /workspace/git-source/
          ./ci/package.sh
          ./ci/release.sh
      env:
        - name: gitsource
          value: git-source
      volumeMounts:
        - name: var-lib-containers
          mountPath: /var/lib/containers

    - name: deploy-pipelines-index
      image: icp4apps/pipelines-utils:latest
      command: ['/bin/bash']
      args:
        - -cex
        - |
          export IMAGE_REGISTRY="$(inputs.params.registry)"
          export IMAGE_REGISTRY_ORG="$(inputs.params.registryNamespace)"
          export INDEX_IMAGE="$(inputs.params.indexImage)"
          export INDEX_VERSION=$(echo '$(inputs.resources.git-source.revision)' | tr '[:upper:]' '[:lower:]' | tr -cd '[:alnum:].-')

          YAML_FILE=/workspace/git-source/ci/tekton/openshift.yaml
          if [ -z "$(inputs.params.clusterSubdomain)" ]; then
            sed -i -e '/host:/d' $YAML_FILE
          else
            sed -i -e 's/HOST/$(inputs.params.hostname).$(inputs.params.clusterSubdomain)/' $YAML_FILE
          fi
          if [ "$(inputs.params.deploymentSuffix)" == "git" ]; then
            sed -i -e "s/pipelines-index/pipelines-index-$INDEX_VERSION/" $YAML_FILE
          else
            sed -i -e "s/pipelines-index/pipelines-index-$(inputs.params.deploymentSuffix)/" $YAML_FILE
          fi
          sed -i -e "s/REGISTRY/$IMAGE_REGISTRY/" $YAML_FILE
          sed -i -e "s/NAMESPACE/$IMAGE_REGISTRY_ORG/" $YAML_FILE
          sed -i -e "s/IMAGE/$INDEX_IMAGE/" $YAML_FILE
          sed -i -e "s/TAG/$INDEX_VERSION/" $YAML_FILE
          sed -i -e "s/DATE/$(date --utc '+%FT%TZ')/" $YAML_FILE
          kubectl apply --validate=false -f $YAML_FILE

  volumes:
    - name: var-lib-containers
      emptyDir: {}

---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: pipelines-index
---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: pipelines-index
rules:
- apiGroups:
  - ""
  resources:
  - pods
  - deployments
  - services
  verbs:
  - get
  - list
  - create
  - delete
  - patch
  - update
  - watch
- apiGroups:
  - apps
  resources:
  - deployments
  - deployments/rollback
  - deployments/scale
  verbs:
  - get
  - list
  - create
  - delete
  - patch
  - update
  - watch
- apiGroups:
  - ""
  - route.openshift.io
  attributeRestrictions: null
  resources:
  - routes
  verbs:
  - create
  - delete
  - deletecollection
  - get
  - list
  - patch
  - update
  - watch
- apiGroups:
  - ""
  - route.openshift.io
  attributeRestrictions: null
  resources:
  - routes/custom-host
  verbs:
  - create
- apiGroups:
  - ""
  - route.openshift.io
  attributeRestrictions: null
  resources:
  - routes/status
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - ""
  - image.openshift.io
  attributeRestrictions: null
  resources:
  - imagestreams/layers
  verbs:
  - get
  - update
- apiGroups:
  - ""
  - image.openshift.io
  attributeRestrictions: null
  resources:
  - imagestreams
  verbs:
  - create
- apiGroups:
  - ""
  - build.openshift.io
  attributeRestrictions: null
  resources:
  - builds/details
  verbs:
  - update
- apiGroups:
  - ""
  - build.openshift.io
  attributeRestrictions: null
  resources:
  - builds
  verbs:
  - get
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: pipelines-index
subjects:
- kind: ServiceAccount
  name: pipelines-index
roleRef:
  kind: Role
  name: pipelines-index
  apiGroup: rbac.authorization.k8s.io
